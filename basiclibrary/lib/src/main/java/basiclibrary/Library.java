/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.*;
public class Library {
    public boolean someLibraryMethod() {
        return true;
    }
    public static void main(String[] args) {
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 600},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        int[] lowestAverageArray =lowestArray(weeklyMonthTemperatures);
        int[] rolled= roll(8);
        int[] duplicate={1,2,3,4,5};
        int[] avg ={20,4,3,5,10};
        System.out.println(Arrays.toString(rolled));
        System.out.println(containsDuplicates(duplicate));
        System.out.println(calculateAverage(avg));
        System.out.println(Arrays.toString(lowestAverageArray));
        System.out.println(isBetween(rolled));
    }

    public static int[] roll(int num){
        int[] dice = new int[num];
        for (int i = 0; i < num; i++) {
            int random = 1 + (int) (Math.random() * 6);
            dice[i] = random;
        }
        return dice;
    }
    public static boolean isBetween(int[] n){
        for (int i = 0; i < n.length; i++) {
              if (n[i] < 7 && n[i] > 0){
                  return true;
              }
        }
        return false;
    }

    public static boolean containsDuplicates(int[] num){
        for (int i = 0; i < num.length; i++) {
            for (int j = 0; j < num.length; j++) {
                if (i!=j){
                    if(num[i]==num[j]){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    public static float calculateAverage(int[] arr) {
        float total = 0;
        for (int num : arr) {
            total += num;
        }
        return total / arr.length;
    }
    public static int[] lowestArray(int[][] array){
        float[] lowestAverage = new float[array[0].length];
        float[] arraysAverages = new float[array.length];

        int indexNumber = 0;
        for (int i = 0; i < array.length; i++) {
            arraysAverages[i] = calculateAverage(array[i]);
        }
        lowestAverage[0] = arraysAverages[0];
        for (int i = 0; i < arraysAverages.length; i++) {
            if (arraysAverages[i] < lowestAverage[0]) {
                lowestAverage[0] = arraysAverages[i];
                indexNumber = i;
            }
        }
        return array[indexNumber];

    }


}
